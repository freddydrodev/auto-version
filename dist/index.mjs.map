{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// Auto Version JS\n// Dorian Beauchesne Â© 2021 - All right reserved\n\n/**\n * TODO :\n *      - Add examples in jsdoc\n */\n\n/* Use case : auto-version --patch +0.0.1\n *            auto-version --minor +0.1.0\n *            auto-version --major +1.0.0\n */\n\nimport path from \"path\";\nimport fs from \"fs\";\nimport pkgDir from \"pkg-dir\";\n\ntype VersionVariantKey = \"major\" | \"minor\" | \"patch\";\n\ntype VersionVariant = { [key in VersionVariantKey]: number };\n\n/**\n * @typedef {Object} VersionObject\n * @property {number} major\n * @property {number} minor\n * @property {number} patch\n * @example\n * {major: 1, minor: 3, patch: 7}  // represents 1.3.7\n */\nlet versionObject: VersionVariant; // global abstraction of the version\n\n/**\n * @class AutoVersion\n */\nexport default class AutoVersion {\n  /**\n   * Return the path of the project\n   * @return {string} the path of the project where the package.json is located\n   */\n  static getLocalPath() {\n    return pkgDir.sync(process.cwd());\n  }\n\n  /**\n   * Return the package.json file of the project\n   * @param {string}   [pathname]   the path of the package.json\n   * @return {JSON}                 the package.json\n   */\n  static getPackageJSON(pathname: string) {\n    const packageJSON = require(path.resolve(\n      pkgDir.sync(pathname) ?? AutoVersion.getLocalPath() ?? \"\",\n      \"package.json\"\n    ));\n\n    console.log(packageJSON);\n\n    // store the package.json file as JSON\n    return packageJSON;\n  }\n\n  /**\n   * Return the current version of the project\n   * @param {string}   [pathname]   the path of the package.json\n   * @return {string}               the version number\n   * @example\n   * AutoVersion.getVersion()              // --> the version of the current project | ex : 0.5.2\n   * AutoVersion.getVersion('../any/dir')  // --> the version of the project in this directory\n   */\n  static getVersion(pathname: string) {\n    const packageJSON = AutoVersion.getPackageJSON(pathname);\n\n    if (!packageJSON) throw Error(\"Unable to find the package.json\");\n\n    return packageJSON.version;\n  }\n\n  /**\n   * Write the version number into package.json\n   * @param {string} version            the version number\n   * @param {string} [pathname]         the path of the package.json\n   * @param {number} [indentation=4]    the number of space to pretty print the package.json file\n   * @example\n   * AutoVersion.setVersion('0.2.3')\n   * AutoVersion.setVersion('0.2.3', '../any/dir')\n   * AutoVersion.setVersion('0.2.3', '../any/dir', 4)  // the package.json will be indented with 4 spaces\n   */\n  static setVersion(version: string, pathname: string, indentation: number) {\n    const packageJSON = AutoVersion.getPackageJSON(pathname);\n\n    packageJSON.version = version;\n\n    fs.writeFileSync(\n      path.resolve(AutoVersion.getLocalPath() ?? \"\", \"package.json\"),\n      JSON.stringify(packageJSON, null, indentation || 4)\n    );\n  }\n\n  /**\n   * Extract the major, minor & patch number from a semver version number\n   * @param versionString\n   * @return {VersionObject}\n   * @example\n   * AutoVersion.parse('1.4.2')  // --> {major: 1, minor: 4, patch: 2}\n   */\n  static parse(versionString: string): VersionVariant {\n    const versionRegex = /(\\d+)\\.?(\\d+)?.?(\\d+)?/i;\n\n    let versionObject: VersionVariant = { major: 0, minor: 0, patch: 0 };\n\n    if (versionString.match(versionRegex)) {\n      const [_, major, minor, patch] = versionString.match(versionRegex)!;\n\n      versionObject = {\n        major: parseInt(major.toString()),\n        minor: parseInt(minor.toString()),\n        patch: parseInt(patch.toString()),\n      };\n    }\n\n    Object.entries(versionObject).forEach(([key, value]) =>\n      !value\n        ? (versionObject[key as VersionVariantKey] = 0)\n        : (versionObject[key as VersionVariantKey] = parseInt(value.toString()))\n    );\n\n    return versionObject;\n  }\n\n  /**\n   * Stringify a versionObject\n   * @param versionObject\n   * @return {string}         the version representation of the string\n   * @example\n   * AutoVersion.stringify({major: 1, minor: 4, patch: 2})  // --> '1.4.2'\n   */\n  static stringify(versionObject: VersionVariant): string {\n    return Object.values(versionObject)\n      .reduce(\n        (prev, curr) => `${prev}.${curr}` as any // TODO SOLVE THE ANY TYPE\n      )\n      .toString();\n  }\n\n  /**\n   * Convert a version into semver standard\n   * @param versionString\n   * @return {string}         the semver version number\n   * @example\n   * AutoVersion.toSemver('1.3.5')      // --> '1.3.5'\n   * AutoVersion.toSemver('1.3')        // --> '1.3.0'\n   * AutoVersion.toSemver('v1.3.5')     // -->  '1.3.5'\n   * AutoVersion.toSemver('version 3')  // -->  '3.0.0'\n   */\n  static toSemver(versionString: string) {\n    return AutoVersion.stringify(AutoVersion.parse(versionString));\n  }\n\n  /**\n   * Increment the version number\n   * @param {string} version\n   * @param {string} level    major | minor | patch\n   * @return {string}         the incremented version number\n   * @example\n   * AutoVersion.increment('0.4.7', 'patch')  // --> '0.4.8'\n   * AutoVersion.increment('0.4.7', 'minor')  // --> '0.5.0'\n   * AutoVersion.increment('0.4.7', 'major')  // --> '1.0.0'\n   */\n  static increment(version: string, level: VersionVariantKey) {\n    const versionObject = AutoVersion.parse(version);\n\n    versionObject[level.toLowerCase() as VersionVariantKey]++;\n\n    if (level === \"major\" || level === \"minor\") versionObject.patch = 0;\n\n    if (level === \"major\") versionObject.minor = 0;\n\n    return AutoVersion.stringify(versionObject);\n  }\n\n  /**\n   * Update the version number for a major update\n   * @param  {string} version\n   * @return {string} the new version number\n   * @example\n   * AutoVersion.major('1.0.0')  // --> '2.0.0'\n   * AutoVersion.major('0.5.9')  // --> '1.0.0'\n   */\n  static major(version: string): string {\n    return AutoVersion.increment(version, \"major\");\n  }\n\n  /**\n   * Update the version number for a minor update\n   * @param {string}  version\n   * @return {string} the new version number\n   * @example\n   * AutoVersion.minor('1.0.0')  // --> '1.1.0'\n   * AutoVersion.minor('0.5.8')  // --> '0.6.0'\n   */\n  static minor(version: string): string {\n    return AutoVersion.increment(version, \"minor\");\n  }\n\n  /**\n   * Update the version number for a patch update\n   * @param {string}  version\n   * @return {string} the new version number\n   * @example\n   * AutoVersion.patch('1.0.0')  // --> '1.0.1'\n   * AutoVersion.patch('0.5.9')  // --> '0.5.10'\n   */\n  static patch(version: string): string {\n    return AutoVersion.increment(version, \"patch\");\n  }\n}\n"],"mappings":"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","names":[]}