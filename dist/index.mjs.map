{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// Auto Version JS\n// Dorian Beauchesne Â© 2021 - All right reserved\n\n/**\n * TODO :\n *      - Add examples in jsdoc\n */\n\n/* Use case : auto-version --patch +0.0.1\n *            auto-version --minor +0.1.0\n *            auto-version --major +1.0.0\n */\n\nimport path from \"path\";\nimport fs from \"fs\";\nimport pkgDir from \"pkg-dir\";\n\ntype VersionVariantKey = \"major\" | \"minor\" | \"patch\";\n\ntype VersionVariant = { [key in VersionVariantKey]: number };\n\n/**\n * @typedef {Object} VersionObject\n * @property {number} major\n * @property {number} minor\n * @property {number} patch\n * @example\n * {major: 1, minor: 3, patch: 7}  // represents 1.3.7\n */\nlet versionObject: VersionVariant; // global abstraction of the version\n\n/**\n * @class AutoVersion\n */\nexport default class AutoVersion {\n  /**\n   * Return the path of the project\n   * @return {string} the path of the project where the package.json is located\n   */\n  static getLocalPath() {\n    return pkgDir.sync(process.cwd());\n  }\n\n  /**\n   * Return the package.json file of the project\n   * @param {string}   [pathname]   the path of the package.json\n   * @return {JSON}                 the package.json\n   */\n  static getPackageJSON(pathname: string) {\n    const packageJSON = require(path.resolve(\n      pkgDir.sync(pathname) ?? AutoVersion.getLocalPath() ?? \"\",\n      \"package.json\"\n    ));\n\n    // store the package.json file as JSON\n    return packageJSON;\n  }\n\n  /**\n   * Return the current version of the project\n   * @param {string}   [pathname]   the path of the package.json\n   * @return {string}               the version number\n   * @example\n   * AutoVersion.getVersion()              // --> the version of the current project | ex : 0.5.2\n   * AutoVersion.getVersion('../any/dir')  // --> the version of the project in this directory\n   */\n  static getVersion(pathname?: string) {\n    const packageJSON = AutoVersion.getPackageJSON(pathname ?? \"\");\n\n    if (!packageJSON) throw Error(\"Unable to find the package.json\");\n\n    return packageJSON.version;\n  }\n\n  /**\n   * Write the version number into package.json\n   * @param {string} version            the version number\n   * @param {string} [pathname]         the path of the package.json\n   * @param {number} [indentation=4]    the number of space to pretty print the package.json file\n   * @example\n   * AutoVersion.setVersion('0.2.3')\n   * AutoVersion.setVersion('0.2.3', '../any/dir')\n   * AutoVersion.setVersion('0.2.3', '../any/dir', 4)  // the package.json will be indented with 4 spaces\n   */\n  static setVersion(version: string, pathname: string, indentation: number) {\n    const packageJSON = AutoVersion.getPackageJSON(pathname);\n\n    packageJSON.version = version;\n\n    fs.writeFileSync(\n      path.resolve(AutoVersion.getLocalPath() ?? \"\", \"package.json\"),\n      JSON.stringify(packageJSON, null, indentation || 4)\n    );\n  }\n\n  /**\n   * Extract the major, minor & patch number from a semver version number\n   * @param versionString\n   * @return {VersionObject}\n   * @example\n   * AutoVersion.parse('1.4.2')  // --> {major: 1, minor: 4, patch: 2}\n   */\n  static parse(versionString: string): VersionVariant {\n    const versionRegex = /(\\d+)\\.?(\\d+)?.?(\\d+)?/i;\n\n    let versionObject: VersionVariant = { major: 0, minor: 0, patch: 0 };\n\n    if (versionString.match(versionRegex)) {\n      const [_, major, minor, patch] = versionString.match(versionRegex)!;\n\n      versionObject = {\n        major: parseInt(major.toString()),\n        minor: parseInt(minor.toString()),\n        patch: parseInt(patch.toString()),\n      };\n    }\n\n    Object.entries(versionObject).forEach(([key, value]) =>\n      !value\n        ? (versionObject[key as VersionVariantKey] = 0)\n        : (versionObject[key as VersionVariantKey] = parseInt(value.toString()))\n    );\n\n    return versionObject;\n  }\n\n  /**\n   * Stringify a versionObject\n   * @param versionObject\n   * @return {string}         the version representation of the string\n   * @example\n   * AutoVersion.stringify({major: 1, minor: 4, patch: 2})  // --> '1.4.2'\n   */\n  static stringify(versionObject: VersionVariant): string {\n    return Object.values(versionObject)\n      .reduce(\n        (prev, curr) => `${prev}.${curr}` as any // TODO SOLVE THE ANY TYPE\n      )\n      .toString();\n  }\n\n  /**\n   * Convert a version into semver standard\n   * @param versionString\n   * @return {string}         the semver version number\n   * @example\n   * AutoVersion.toSemver('1.3.5')      // --> '1.3.5'\n   * AutoVersion.toSemver('1.3')        // --> '1.3.0'\n   * AutoVersion.toSemver('v1.3.5')     // -->  '1.3.5'\n   * AutoVersion.toSemver('version 3')  // -->  '3.0.0'\n   */\n  static toSemver(versionString: string) {\n    return AutoVersion.stringify(AutoVersion.parse(versionString));\n  }\n\n  /**\n   * Increment the version number\n   * @param {string} version\n   * @param {string} level    major | minor | patch\n   * @return {string}         the incremented version number\n   * @example\n   * AutoVersion.increment('0.4.7', 'patch')  // --> '0.4.8'\n   * AutoVersion.increment('0.4.7', 'minor')  // --> '0.5.0'\n   * AutoVersion.increment('0.4.7', 'major')  // --> '1.0.0'\n   */\n  static increment(version: string, level: VersionVariantKey) {\n    const versionObject = AutoVersion.parse(version);\n\n    versionObject[level.toLowerCase() as VersionVariantKey]++;\n\n    if (level === \"major\" || level === \"minor\") versionObject.patch = 0;\n\n    if (level === \"major\") versionObject.minor = 0;\n\n    return AutoVersion.stringify(versionObject);\n  }\n\n  /**\n   * Update the version number for a major update\n   * @param  {string} version\n   * @return {string} the new version number\n   * @example\n   * AutoVersion.major('1.0.0')  // --> '2.0.0'\n   * AutoVersion.major('0.5.9')  // --> '1.0.0'\n   */\n  static major(version: string): string {\n    return AutoVersion.increment(version, \"major\");\n  }\n\n  /**\n   * Update the version number for a minor update\n   * @param {string}  version\n   * @return {string} the new version number\n   * @example\n   * AutoVersion.minor('1.0.0')  // --> '1.1.0'\n   * AutoVersion.minor('0.5.8')  // --> '0.6.0'\n   */\n  static minor(version: string): string {\n    return AutoVersion.increment(version, \"minor\");\n  }\n\n  /**\n   * Update the version number for a patch update\n   * @param {string}  version\n   * @return {string} the new version number\n   * @example\n   * AutoVersion.patch('1.0.0')  // --> '1.0.1'\n   * AutoVersion.patch('0.5.9')  // --> '0.5.10'\n   */\n  static patch(version: string): string {\n    return AutoVersion.increment(version, \"patch\");\n  }\n}\n"],"mappings":"6RAaA,OAAOA,MAAU,OACjB,OAAOC,MAAQ,KACf,OAAOC,MAAY,UAmBnB,IAAqBC,EAArB,MAAqBC,CAAY,CAK/B,OAAO,cAAe,CACpB,OAAOC,EAAO,KAAK,QAAQ,IAAI,CAAC,CAClC,CAOA,OAAO,eAAeC,EAAkB,CAhD1C,IAAAC,EAAAC,EAuDI,OANoBC,EAAQC,EAAK,SAC/BF,GAAAD,EAAAF,EAAO,KAAKC,CAAQ,IAApB,KAAAC,EAAyBH,EAAY,aAAa,IAAlD,KAAAI,EAAuD,GACvD,cACF,CAAC,CAIH,CAUA,OAAO,WAAWF,EAAmB,CACnC,IAAMK,EAAcP,EAAY,eAAeE,GAAA,KAAAA,EAAY,EAAE,EAE7D,GAAI,CAACK,EAAa,MAAM,MAAM,iCAAiC,EAE/D,OAAOA,EAAY,OACrB,CAYA,OAAO,WAAWC,EAAiBN,EAAkBO,EAAqB,CApF5E,IAAAN,EAqFI,IAAMI,EAAcP,EAAY,eAAeE,CAAQ,EAEvDK,EAAY,QAAUC,EAEtBE,EAAG,cACDJ,EAAK,SAAQH,EAAAH,EAAY,aAAa,IAAzB,KAAAG,EAA8B,GAAI,cAAc,EAC7D,KAAK,UAAUI,EAAa,KAAME,GAAe,CAAC,CACpD,CACF,CASA,OAAO,MAAME,EAAuC,CAClD,IAAMC,EAAe,0BAEjBC,EAAgC,CAAE,MAAO,EAAG,MAAO,EAAG,MAAO,CAAE,EAEnE,GAAIF,EAAc,MAAMC,CAAY,EAAG,CACrC,GAAM,CAACE,EAAGC,EAAOC,EAAOC,CAAK,EAAIN,EAAc,MAAMC,CAAY,EAEjEC,EAAgB,CACd,MAAO,SAASE,EAAM,SAAS,CAAC,EAChC,MAAO,SAASC,EAAM,SAAS,CAAC,EAChC,MAAO,SAASC,EAAM,SAAS,CAAC,CAClC,CACF,CAEA,cAAO,QAAQJ,CAAa,EAAE,QAAQ,CAAC,CAACK,EAAKC,CAAK,IAC/CA,EAEIN,EAAcK,CAAwB,EAAI,SAASC,EAAM,SAAS,CAAC,EADnEN,EAAcK,CAAwB,EAAI,CAEjD,EAEOL,CACT,CASA,OAAO,UAAUA,EAAuC,CACtD,OAAO,OAAO,OAAOA,CAAa,EAC/B,OACC,CAACO,EAAMC,IAAS,GAAGD,CAAI,IAAIC,CAAI,EACjC,EACC,SAAS,CACd,CAYA,OAAO,SAASV,EAAuB,CACrC,OAAOX,EAAY,UAAUA,EAAY,MAAMW,CAAa,CAAC,CAC/D,CAYA,OAAO,UAAUH,EAAiBc,EAA0B,CAC1D,IAAMT,EAAgBb,EAAY,MAAMQ,CAAO,EAE/C,OAAAK,EAAcS,EAAM,YAAY,CAAsB,KAElDA,IAAU,SAAWA,IAAU,WAAST,EAAc,MAAQ,GAE9DS,IAAU,UAAST,EAAc,MAAQ,GAEtCb,EAAY,UAAUa,CAAa,CAC5C,CAUA,OAAO,MAAML,EAAyB,CACpC,OAAOR,EAAY,UAAUQ,EAAS,OAAO,CAC/C,CAUA,OAAO,MAAMA,EAAyB,CACpC,OAAOR,EAAY,UAAUQ,EAAS,OAAO,CAC/C,CAUA,OAAO,MAAMA,EAAyB,CACpC,OAAOR,EAAY,UAAUQ,EAAS,OAAO,CAC/C,CACF","names":["path","fs","pkgDir","AutoVersion","_AutoVersion","pkgDir","pathname","_a","_b","__require","path","packageJSON","version","indentation","fs","versionString","versionRegex","versionObject","_","major","minor","patch","key","value","prev","curr","level"]}